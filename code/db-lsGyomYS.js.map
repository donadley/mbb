{"version":3,"file":"db-lsGyomYS.js","sources":["../../src/db/db.ts"],"sourcesContent":["// db.ts\nexport interface Customer {\n    id?: number;\n    email: string;\n    firstName: string;\n    date: string;\n  }\n\n  let dbInstance: IDBDatabase | null = null;\n\n  export function openDatabase(): Promise<IDBDatabase> {\n    return new Promise((resolve, reject) => {\n      // If the database instance already exists, return it\n      if (dbInstance) {\n        resolve(dbInstance);\n        return;\n      }\n\n      // Open the database\n      const request = indexedDB.open(\"CustomerDB\", 1);\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        db.createObjectStore(\"customers\", { keyPath: \"id\", autoIncrement: true });\n      };\n\n      request.onsuccess = (event) => {\n        dbInstance = (event.target as IDBOpenDBRequest).result;\n        resolve(dbInstance);\n      };\n\n      request.onerror = (event) => {\n        reject((event.target as IDBOpenDBRequest).error);\n      };\n    });\n  }\n\n  // Function to add a customer to the database\n  export async function addCustomerData(customer: Customer): Promise<void> {\n    const db = await openDatabase();\n    const transaction = db.transaction(\"customers\", \"readwrite\");\n    const store = transaction.objectStore(\"customers\");\n\n    store.add(customer);\n\n    transaction.oncomplete = () => {\n      console.log(\"Customer data added:\", customer);\n      alert(\"Customer data saved for offline use!\");\n    };\n\n    transaction.onerror = (event) => {\n      console.error(\"Error saving customer data:\", (event.target as IDBRequest).error);\n    };\n  }\n\n  export async function getAllCustomers(): Promise<Customer[]> {\n    const db = await openDatabase();\n    const transaction = db.transaction(\"customers\", \"readonly\");\n    const store = transaction.objectStore(\"customers\");\n    const request = store.getAll();\n\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = (event) => {\n        reject((event.target as IDBRequest).error);\n      };\n    });\n  }\n"],"names":["dbInstance","openDatabase","resolve","reject","request","event","addCustomerData","customer","transaction","getAllCustomers"],"mappings":"AAQE,IAAIA,EAAiC,KAE9B,SAASC,GAAqC,CACnD,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CAEtC,GAAIH,EAAY,CACdE,EAAQF,CAAU,EAClB,MAAA,CAIF,MAAMI,EAAU,UAAU,KAAK,aAAc,CAAC,EAEtCA,EAAA,gBAAmBC,GAAU,CACvBA,EAAM,OAA4B,OAC3C,kBAAkB,YAAa,CAAE,QAAS,KAAM,cAAe,GAAM,CAC1E,EAEQD,EAAA,UAAaC,GAAU,CAC7BL,EAAcK,EAAM,OAA4B,OAChDH,EAAQF,CAAU,CACpB,EAEQI,EAAA,QAAWC,GAAU,CACnBF,EAAAE,EAAM,OAA4B,KAAK,CACjD,CAAA,CACD,CACH,CAGA,eAAsBC,EAAgBC,EAAmC,CAEvE,MAAMC,GADK,MAAMP,EAAa,GACP,YAAY,YAAa,WAAW,EAC7CO,EAAY,YAAY,WAAW,EAE3C,IAAID,CAAQ,EAElBC,EAAY,WAAa,IAAM,CACrB,QAAA,IAAI,uBAAwBD,CAAQ,EAC5C,MAAM,sCAAsC,CAC9C,EAEYC,EAAA,QAAWH,GAAU,CAC/B,QAAQ,MAAM,8BAAgCA,EAAM,OAAsB,KAAK,CACjF,CACF,CAEA,eAAsBI,GAAuC,CAIrD,MAAAL,GAHK,MAAMH,EAAa,GACP,YAAY,YAAa,UAAU,EAChC,YAAY,WAAW,EAC3B,OAAO,EAE7B,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtCC,EAAQ,UAAY,IAAM,CACxBF,EAAQE,EAAQ,MAAM,CACxB,EACQA,EAAA,QAAWC,GAAU,CACnBF,EAAAE,EAAM,OAAsB,KAAK,CAC3C,CAAA,CACD,CACH"}